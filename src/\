import React from "react";
import ReactDOM from "react-dom";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import CssBaseline from "@mui/material/CssBaseline";
import { ThemeProvider } from "@mui/material/styles";

import { styled } from '@mui/material/styles';
import Box from "@mui/material/Box";
import Link from "@mui/material/Link";
import Button from "@mui/material/Button";
import InputBase from '@mui/material/InputBase';

import AssignmentIndIcon from '@mui/icons-material/AssignmentInd';
import LockIcon from '@mui/icons-material/Lock';

import { Header } from "./Header";
import { Backdrop } from "./Backdrop";
import { Card } from "./Card";
import { ConnectDialog } from "./ConnectDialog";
import { AccountDialog } from "./AccountDialog";

import { getContext } from "./context";
import { getMUITheme } from "./muiTheme";

import "./style.css";

const context = getContext();
const theme = context.getTheme();
const muiTheme = getMUITheme();

function CardBody(props) {

  const _CardBody = styled(Box)({

    padding: "16px"
  });

  return (
    <_CardBody>
      { props.children }
    </_CardBody>
  );
}

function CardContainer(props) {

  const display = typeof props.show == "undefined" ||
    props.show == false ? "none" : "block";

  const CardContainer = styled(Box)({

    display: display,
    margin: "24px auto",
    width: "100%",

    "@media (min-width: 900px)": {
      width: "875px"
    }
  });

  return (<CardContainer>{ props.children }</CardContainer>);
}

function Table(props) {

  const Table = styled(Box)({

    display: "flex",
    flexDirection: "column",
    color: theme.textColor
  });

  return (<Table>{ props.children }</Table>);
}

function Caption(props) {

  const Caption = styled(Box)({

    cursor: "pointer",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    padding: "6px",
    borderStyle: "solid",
    borderColor: `${ theme.borderTopColor } transparent ${ theme.borderBottomColor } transparent`,
    borderWidth: "1px 0 1px 0",
  });

  return (<Caption>{ props.children }</Caption>);
}

function Row(props) {

  const Caption = styled(Box)({

    cursor: "pointer",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    padding: "0px",
    borderStyle: "solid",
    borderColor: `${ theme.borderTopColor } transparent ${ theme.borderBottomColor } transparent`,
    borderWidth: "1px 0 1px 0",
  });

  return (<Caption>{ props.children }</Caption>);
}



function Avatar(props) {

  const Avatar = styled(Box)({

    width: "80px",
    color: theme.textColor
  });

  return (
    <Avatar>{ props.children  }
    </Avatar>
  );
}

function Action(props) {

  const Action = styled(Box)({

    width: "33%",
    textAlign: "center",
    backgroundColor: "red",

    "@media (min-width: 450px)": {
      width: "25%"
    },

    "@media (min-width: 800px)": {
      textAlign: "right"
    }

  });

  return (
    <Action>{ props.children }
    </Action>
  );
}

function RowSpan(props) {

  const RowSpan = styled(Box)({

    flex: 2,
    display: "flex",
    flexDirection: "column",

    "@media (min-width: 300px)": {

      display: "flex",
      flexDirection: "row",
    }
  });

  return (
    <RowSpan>
      { props.children }
    </RowSpan>
  );
}

function RowItem(props) {

  const RowItem = styled(Box)({

    padding: "4px 0",
    width: "initial",

    fontSize: "14px",
    textAlign: "left",

    "@media (min-width: 300px)": {

      padding: "0",
      width: "50%",
      textAlign: "center"
    },

    "@media (min-width: 500px)": {
      width: "33%",
    },

    "@media (min-width: 600px)": {
      width: "25%",
    },

    "@media (min-width: 800px)": {
      width: "20%",
    }

  });

  const Handedness = styled(RowItem)({

    "@media (min-width: 300px)": {
      display: "none"
    },

    "@media (min-width: 800px)": {
      display: "block"
    }

  });

  const Height = styled(RowItem)({

    "@media (min-width: 300px)": {
      display: "none"
    },

    "@media (min-width: 600px)": {
      display: "block"
    }

  });

  const Gender = styled(RowItem)({

    "@media (min-width: 300px)": {
      display: "none"
    },

    "@media (min-width: 500px)": {
      display: "block"
    }

  });

  switch (props.type) {

    case "handedness": return (
      <Handedness className={ props.className }>{ props.children }</Handedness>
    );

    case "height": return (
      <Height className={ props.className }>{ props.children }</Height>
    );

    case "gender": return (
      <Gender className={ props.className }>{ props.children }</Gender>
    );
  }

  return (
    <RowItem className={ props.className }>
      { props.children }
    </RowItem>
  );

}

function WrapTable(props) {

  const ipc = props.ipc;

  const Image = styled("img")({

    width: "80px",
    height: "80px",
    imageRendering: "pixelated"
  });

  const SmButton = styled(Button)({

    margin: "0 16px 8px 0",
    fontSize: "12px"
  });


  return (
    <Row>
      <Avatar><Image src="gif/1.gif" /></Avatar>
      <RowSpan>
        <RowItem>#{ ipc.token_id }</RowItem>
        <RowItem>{ ipc.subrace }</RowItem>
        <RowItem type="gender">{ ipc.gender }</RowItem>
        <RowItem type="height">{ ipc.height }</RowItem>
        <RowItem type="handedness">{ ipc.handedness }</RowItem>
      </RowSpan>
      <Action>
        <SmButton variant="contained">View</SmButton>
        <SmButton variant="contained">Approve</SmButton>
      </Action>
    </Row>
  );
}

function WrapDialog(props) {

  const database = context.getDatabase();

  const ipc = database[0];


  const RowCaption = styled(RowItem)({ fontWeight: "bold" });

  return (

    <CardContainer show={ true }>

    <Card
      icon={ <LockIcon />  }
      title="Wrap"
      subtitle="Wrap individual tokens"
    >
      <Table>

        <Caption>
          <Avatar></Avatar>
	  <RowSpan>
	    <RowCaption>Token Id</RowCaption>
	    <RowCaption>Race</RowCaption>
	    <RowCaption type="gender">Gender</RowCaption>
	    <RowCaption type="height">Height</RowCaption>
	    <RowCaption type="handedness">Handedness</RowCaption>
	  </RowSpan>
          <Action>&nbsp;</Action>
	</Caption>

	<WrapTable ipc={ ipc  } />

        <Box sx={{ padding: "12px 16px 8px 16px" }}>
          <Box sx={{ fontSize: "14px", textAlign: "right" }}>1 of 1 &nbsp; &lt; &nbsp; &gt;</Box>
	</Box>
      </Table>
    </Card>
    </CardContainer>
  );
}

function Layout(props) {

  const _Layout = styled(Box)({

    height: "100vh", 
    backgroundColor: theme.backgruondColor,
    fontFamily: 'poppins-light',
    color: theme.textColor
  });

  return (<>
    <CssBaseline />
    <ThemeProvider theme={ muiTheme }>
      <Backdrop>
        <ConnectDialog /> 
        <AccountDialog />

      </Backdrop>
      <_Layout>
        <Header />
	<WrapDialog />
        { props.children }
      </_Layout>
    </ThemeProvider>
  </>);
}


async function main() {

  await context.initialize();

  const root = document.getElementById('root');

  ReactDOM.render(
    <React.StrictMode>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={ <Layout /> } />
        </Routes>
      </BrowserRouter>
    </React.StrictMode>,
    root
  );
}

main();
